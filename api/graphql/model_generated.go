// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type CreateService struct {
	Name       string      `json:"name"`
	Type       ServiceType `json:"type"`
	Connection string      `json:"connection"`
}

type CreateTask struct {
	Name     string   `json:"name"`
	Type     TaskType `json:"type"`
	Storages []string `json:"storages"`
}

type DeleteService struct {
	Name string      `json:"name"`
	Type ServiceType `json:"type"`
}

type DeleteTask struct {
	ID string `json:"id"`
}

type Service struct {
	Name       string      `json:"name"`
	Type       ServiceType `json:"type"`
	Connection string      `json:"connection"`
}

type Task struct {
	ID        string     `json:"id"`
	Name      string     `json:"name"`
	Type      TaskType   `json:"type"`
	Status    TaskStatus `json:"status"`
	CreatedAt time.Time  `json:"created_at"`
	UpdatedAt time.Time  `json:"updated_at"`
	Storages  []string   `json:"storages"`
}

type ServiceType string

const (
	ServiceTypeQingstor ServiceType = "qingstor"
	ServiceTypeS3       ServiceType = "s3"
)

var AllServiceType = []ServiceType{
	ServiceTypeQingstor,
	ServiceTypeS3,
}

func (e ServiceType) IsValid() bool {
	switch e {
	case ServiceTypeQingstor, ServiceTypeS3:
		return true
	}
	return false
}

func (e ServiceType) String() string {
	return string(e)
}

func (e *ServiceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServiceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServiceType", str)
	}
	return nil
}

func (e ServiceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskStatus string

const (
	TaskStatusReady   TaskStatus = "Ready"
	TaskStatusRunning TaskStatus = "Running"
)

var AllTaskStatus = []TaskStatus{
	TaskStatusReady,
	TaskStatusRunning,
}

func (e TaskStatus) IsValid() bool {
	switch e {
	case TaskStatusReady, TaskStatusRunning:
		return true
	}
	return false
}

func (e TaskStatus) String() string {
	return string(e)
}

func (e *TaskStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStatus", str)
	}
	return nil
}

func (e TaskStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskType string

const (
	TaskTypeCopyDir TaskType = "CopyDir"
)

var AllTaskType = []TaskType{
	TaskTypeCopyDir,
}

func (e TaskType) IsValid() bool {
	switch e {
	case TaskTypeCopyDir:
		return true
	}
	return false
}

func (e TaskType) String() string {
	return string(e)
}

func (e *TaskType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskType", str)
	}
	return nil
}

func (e TaskType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
