scalar Time
scalar Any

type Query {
    task(id: String!): Task!
    tasks: [Task!]!
}

type Mutation {
    createTask(input: CreateTask): Task!
    deleteTask(input: DeleteTask): Task!
    runTask(id: String!): Task!
}

type Task {
    id: String!
    name: String!
    type: TaskType!
    status: TaskStatus!
    created_at: Time!
    updated_at: Time!
    storages: [Storage!]!
    options: [Pair!]!
    staffs: [Staff!]!
}

enum TaskType {
    copyDir
}

enum TaskStatus {
    Created
    Ready
    Running
    Finished
    Stopped
    Error
}

input CreateTask {
    name: String!
    type: TaskType!
    storages: [StorageInput!]!
    options: [PairInput!]!
    staffs: [StaffInput!]!
}

input DeleteTask {
    id: String!
}

input StorageInput {
    type: StorageType!
    options: [PairInput!]!
}

type Storage {
    type: StorageType!
    options: [Pair!]!
}

enum StorageType {
    Fs
    Qingstor
}

input PairInput {
    key: String!
    value: String!
}

type Pair {
    key: String!
    value: String!
}

input StaffInput {
    id: String!
}

type Staff {
    id: String!
}