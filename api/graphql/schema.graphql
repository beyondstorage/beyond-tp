scalar Time
scalar Any

type Query {
    task(id: String!): Task!
    tasks: [Task!]!
    identities(type: IdentityType): [Identity!]!
    identity(type: IdentityType!, name: String!): Identity!
}

type Mutation {
    createTask(input: CreateTask): Task!
    deleteTask(input: DeleteTask): Task!
    runTask(id: String!): Task!
    createIdentity(input: CreateIdentity): Identity!
    deleteIdentity(input: DeleteIdentity): Identity!
}

type Task {
    id: String!
    name: String!
    type: TaskType!
    status: TaskStatus!
    created_at: Time!
    updated_at: Time!
    storages: [Storage!]!
}

type Identity {
    name: String!
    type: IdentityType!
    credential: Credential!
    endpoint: Endpoint!
}

input CredentialInput {
    protocol: String!
    args: [String!]
}

type Credential {
    protocol: String!
    args: [String!]
}

input EndpointInput {
    protocol: String!
    args: [String!]
}

type Endpoint {
    protocol: String!
    args: [String!]
}

enum TaskType {
    copyDir
}

enum TaskStatus {
    Created
    Ready
    Running
    Finished
    Stopped
    Error
}

enum IdentityType {
    Qingstor
}

input CreateTask {
    name: String!
    type: TaskType!
    storages: [StorageInput!]!
}

input DeleteTask {
    id: String!
}

input CreateIdentity {
    name: String!
    type: IdentityType!
    credential: CredentialInput!
    endpoint: EndpointInput!
}

input DeleteIdentity {
    name: String!
    type: IdentityType!
}

input StorageInput {
    type: StorageType!
    connection: String!
}

type Storage {
    type: StorageType!
    connection: String!
}

enum StorageType {
    Fs
    Qingstor
}
