scalar Time
scalar Any

type Query {
    task(id: String!): Task!
    tasks: [Task!]!

    service(type: ServiceType!, name: String!): Service!
    services(type: ServiceType): [Service!]!
}

type Mutation {
    createTask(input: CreateTask): Task!
    deleteTask(input: DeleteTask): Task!
    runTask(id: String!): Task!

    createService(input: CreateService): Service!
    deleteService(input: DeleteService): Service!
}

type Task {
    id: String!
    name: String!
    type: TaskType!
    status: TaskStatus!
    created_at: Time!
    updated_at: Time!
    storages: [String!]!
}

type Service {
    name: String!
    type: ServiceType!
    connection: String!
}

enum TaskType {
    CopyDir
}

enum TaskStatus {
    Ready
    Running
}

enum ServiceType {
    qingstor
    s3
}

input CreateTask {
    name: String!
    type: TaskType!
    storages: [String!]!
}

input DeleteTask {
    id: String!
}

input CreateService {
    name: String!
    type: ServiceType!
    connection: String!
}

input DeleteService {
    name: String!
    type: ServiceType!
}
