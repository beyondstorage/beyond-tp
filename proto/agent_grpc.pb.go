// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	Notify(ctx context.Context, opts ...grpc.CallOption) (Agent_NotifyClient, error)
	NextTask(ctx context.Context, in *NextTaskRequest, opts ...grpc.CallOption) (*TaskReply, error)
	NextJob(ctx context.Context, in *NextJobRequest, opts ...grpc.CallOption) (*Job, error)
	CreateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*EmptyReply, error)
	WaitJob(ctx context.Context, in *WaitJobRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	FinishJob(ctx context.Context, in *FinishJobRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	SetMeta(ctx context.Context, in *MetaEntry, opts ...grpc.CallOption) (*EmptyReply, error)
	GetMeta(ctx context.Context, in *MetaKey, opts ...grpc.CallOption) (*MetaValue, error)
	DeleteMeta(ctx context.Context, in *MetaKey, opts ...grpc.CallOption) (*EmptyReply, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) Notify(ctx context.Context, opts ...grpc.CallOption) (Agent_NotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], "/agent.Agent/Notify", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentNotifyClient{stream}
	return x, nil
}

type Agent_NotifyClient interface {
	Send(*Notification) error
	Recv() (*Notification, error)
	grpc.ClientStream
}

type agentNotifyClient struct {
	grpc.ClientStream
}

func (x *agentNotifyClient) Send(m *Notification) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentNotifyClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) NextTask(ctx context.Context, in *NextTaskRequest, opts ...grpc.CallOption) (*TaskReply, error) {
	out := new(TaskReply)
	err := c.cc.Invoke(ctx, "/agent.Agent/NextTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) NextJob(ctx context.Context, in *NextJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/agent.Agent/NextJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) CreateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/agent.Agent/CreateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) WaitJob(ctx context.Context, in *WaitJobRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/agent.Agent/WaitJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) FinishJob(ctx context.Context, in *FinishJobRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/agent.Agent/FinishJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) SetMeta(ctx context.Context, in *MetaEntry, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/agent.Agent/SetMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetMeta(ctx context.Context, in *MetaKey, opts ...grpc.CallOption) (*MetaValue, error) {
	out := new(MetaValue)
	err := c.cc.Invoke(ctx, "/agent.Agent/GetMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) DeleteMeta(ctx context.Context, in *MetaKey, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/agent.Agent/DeleteMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	Notify(Agent_NotifyServer) error
	NextTask(context.Context, *NextTaskRequest) (*TaskReply, error)
	NextJob(context.Context, *NextJobRequest) (*Job, error)
	CreateJob(context.Context, *Job) (*EmptyReply, error)
	WaitJob(context.Context, *WaitJobRequest) (*EmptyReply, error)
	FinishJob(context.Context, *FinishJobRequest) (*EmptyReply, error)
	SetMeta(context.Context, *MetaEntry) (*EmptyReply, error)
	GetMeta(context.Context, *MetaKey) (*MetaValue, error)
	DeleteMeta(context.Context, *MetaKey) (*EmptyReply, error)
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) Notify(Agent_NotifyServer) error {
	return status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedAgentServer) NextTask(context.Context, *NextTaskRequest) (*TaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextTask not implemented")
}
func (UnimplementedAgentServer) NextJob(context.Context, *NextJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextJob not implemented")
}
func (UnimplementedAgentServer) CreateJob(context.Context, *Job) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedAgentServer) WaitJob(context.Context, *WaitJobRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitJob not implemented")
}
func (UnimplementedAgentServer) FinishJob(context.Context, *FinishJobRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishJob not implemented")
}
func (UnimplementedAgentServer) SetMeta(context.Context, *MetaEntry) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMeta not implemented")
}
func (UnimplementedAgentServer) GetMeta(context.Context, *MetaKey) (*MetaValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedAgentServer) DeleteMeta(context.Context, *MetaKey) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMeta not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_Notify_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).Notify(&agentNotifyServer{stream})
}

type Agent_NotifyServer interface {
	Send(*Notification) error
	Recv() (*Notification, error)
	grpc.ServerStream
}

type agentNotifyServer struct {
	grpc.ServerStream
}

func (x *agentNotifyServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentNotifyServer) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Agent_NextTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).NextTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/NextTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).NextTask(ctx, req.(*NextTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_NextJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).NextJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/NextJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).NextJob(ctx, req.(*NextJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).CreateJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_WaitJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).WaitJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/WaitJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).WaitJob(ctx, req.(*WaitJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_FinishJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).FinishJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/FinishJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).FinishJob(ctx, req.(*FinishJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_SetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/SetMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SetMeta(ctx, req.(*MetaEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/GetMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetMeta(ctx, req.(*MetaKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_DeleteMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).DeleteMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/DeleteMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).DeleteMeta(ctx, req.(*MetaKey))
	}
	return interceptor(ctx, in, info, handler)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NextTask",
			Handler:    _Agent_NextTask_Handler,
		},
		{
			MethodName: "NextJob",
			Handler:    _Agent_NextJob_Handler,
		},
		{
			MethodName: "CreateJob",
			Handler:    _Agent_CreateJob_Handler,
		},
		{
			MethodName: "WaitJob",
			Handler:    _Agent_WaitJob_Handler,
		},
		{
			MethodName: "FinishJob",
			Handler:    _Agent_FinishJob_Handler,
		},
		{
			MethodName: "SetMeta",
			Handler:    _Agent_SetMeta_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _Agent_GetMeta_Handler,
		},
		{
			MethodName: "DeleteMeta",
			Handler:    _Agent_DeleteMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Notify",
			Handler:       _Agent_Notify_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "agent.proto",
}
