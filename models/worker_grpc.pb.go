// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	PollJob(ctx context.Context, in *PollJobRequest, opts ...grpc.CallOption) (Worker_PollJobClient, error)
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobReply, error)
	WaitJob(ctx context.Context, in *WaitJobRequest, opts ...grpc.CallOption) (*WaitJobReply, error)
	FinishJob(ctx context.Context, in *FinishJobRequest, opts ...grpc.CallOption) (*FinishJobReply, error)
	SetJobMetadata(ctx context.Context, in *SetJobMetadataRequest, opts ...grpc.CallOption) (*SetJobMetadataReply, error)
	GetJobMetadata(ctx context.Context, in *GetJobMetadataRequest, opts ...grpc.CallOption) (*GetJobMetadataReply, error)
	DeleteJobMetadata(ctx context.Context, in *DeleteJobMetadataRequest, opts ...grpc.CallOption) (*DeleteJobMetadataReply, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) PollJob(ctx context.Context, in *PollJobRequest, opts ...grpc.CallOption) (Worker_PollJobClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[0], "/worker.Worker/PollJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerPollJobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_PollJobClient interface {
	Recv() (*PollJobReply, error)
	grpc.ClientStream
}

type workerPollJobClient struct {
	grpc.ClientStream
}

func (x *workerPollJobClient) Recv() (*PollJobReply, error) {
	m := new(PollJobReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobReply, error) {
	out := new(CreateJobReply)
	err := c.cc.Invoke(ctx, "/worker.Worker/CreateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) WaitJob(ctx context.Context, in *WaitJobRequest, opts ...grpc.CallOption) (*WaitJobReply, error) {
	out := new(WaitJobReply)
	err := c.cc.Invoke(ctx, "/worker.Worker/WaitJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) FinishJob(ctx context.Context, in *FinishJobRequest, opts ...grpc.CallOption) (*FinishJobReply, error) {
	out := new(FinishJobReply)
	err := c.cc.Invoke(ctx, "/worker.Worker/FinishJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) SetJobMetadata(ctx context.Context, in *SetJobMetadataRequest, opts ...grpc.CallOption) (*SetJobMetadataReply, error) {
	out := new(SetJobMetadataReply)
	err := c.cc.Invoke(ctx, "/worker.Worker/SetJobMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) GetJobMetadata(ctx context.Context, in *GetJobMetadataRequest, opts ...grpc.CallOption) (*GetJobMetadataReply, error) {
	out := new(GetJobMetadataReply)
	err := c.cc.Invoke(ctx, "/worker.Worker/GetJobMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) DeleteJobMetadata(ctx context.Context, in *DeleteJobMetadataRequest, opts ...grpc.CallOption) (*DeleteJobMetadataReply, error) {
	out := new(DeleteJobMetadataReply)
	err := c.cc.Invoke(ctx, "/worker.Worker/DeleteJobMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility
type WorkerServer interface {
	PollJob(*PollJobRequest, Worker_PollJobServer) error
	CreateJob(context.Context, *CreateJobRequest) (*CreateJobReply, error)
	WaitJob(context.Context, *WaitJobRequest) (*WaitJobReply, error)
	FinishJob(context.Context, *FinishJobRequest) (*FinishJobReply, error)
	SetJobMetadata(context.Context, *SetJobMetadataRequest) (*SetJobMetadataReply, error)
	GetJobMetadata(context.Context, *GetJobMetadataRequest) (*GetJobMetadataReply, error)
	DeleteJobMetadata(context.Context, *DeleteJobMetadataRequest) (*DeleteJobMetadataReply, error)
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (UnimplementedWorkerServer) PollJob(*PollJobRequest, Worker_PollJobServer) error {
	return status.Errorf(codes.Unimplemented, "method PollJob not implemented")
}
func (UnimplementedWorkerServer) CreateJob(context.Context, *CreateJobRequest) (*CreateJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedWorkerServer) WaitJob(context.Context, *WaitJobRequest) (*WaitJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitJob not implemented")
}
func (UnimplementedWorkerServer) FinishJob(context.Context, *FinishJobRequest) (*FinishJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishJob not implemented")
}
func (UnimplementedWorkerServer) SetJobMetadata(context.Context, *SetJobMetadataRequest) (*SetJobMetadataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJobMetadata not implemented")
}
func (UnimplementedWorkerServer) GetJobMetadata(context.Context, *GetJobMetadataRequest) (*GetJobMetadataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobMetadata not implemented")
}
func (UnimplementedWorkerServer) DeleteJobMetadata(context.Context, *DeleteJobMetadataRequest) (*DeleteJobMetadataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobMetadata not implemented")
}
func (UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	s.RegisterService(&Worker_ServiceDesc, srv)
}

func _Worker_PollJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PollJobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).PollJob(m, &workerPollJobServer{stream})
}

type Worker_PollJobServer interface {
	Send(*PollJobReply) error
	grpc.ServerStream
}

type workerPollJobServer struct {
	grpc.ServerStream
}

func (x *workerPollJobServer) Send(m *PollJobReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).CreateJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_WaitJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).WaitJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/WaitJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).WaitJob(ctx, req.(*WaitJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_FinishJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).FinishJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/FinishJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).FinishJob(ctx, req.(*FinishJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_SetJobMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetJobMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).SetJobMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/SetJobMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).SetJobMetadata(ctx, req.(*SetJobMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_GetJobMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).GetJobMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/GetJobMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).GetJobMetadata(ctx, req.(*GetJobMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_DeleteJobMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).DeleteJobMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/DeleteJobMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).DeleteJobMetadata(ctx, req.(*DeleteJobMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Worker_ServiceDesc is the grpc.ServiceDesc for Worker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "worker.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _Worker_CreateJob_Handler,
		},
		{
			MethodName: "WaitJob",
			Handler:    _Worker_WaitJob_Handler,
		},
		{
			MethodName: "FinishJob",
			Handler:    _Worker_FinishJob_Handler,
		},
		{
			MethodName: "SetJobMetadata",
			Handler:    _Worker_SetJobMetadata_Handler,
		},
		{
			MethodName: "GetJobMetadata",
			Handler:    _Worker_GetJobMetadata_Handler,
		},
		{
			MethodName: "DeleteJobMetadata",
			Handler:    _Worker_DeleteJobMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PollJob",
			Handler:       _Worker_PollJob_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "worker.proto",
}
